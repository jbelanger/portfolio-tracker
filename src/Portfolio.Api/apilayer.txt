
namespace Portfolio.Api
{
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}
using System.Security.Claims;
using Portfolio.Domain.Interfaces;

namespace Portfolio.Api;

public class CurrentUser : IUser
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public CurrentUser(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public string? Id => _httpContextAccessor.HttpContext?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
}using Microsoft.EntityFrameworkCore;
using Portfolio.App.DTOs;
using Portfolio.Domain.Entities;
using Portfolio.Domain.Interfaces;
using Portfolio.Infrastructure;

namespace Portfolio.Api.Features
{
    public static class PortfolioEndpoints
    {
        public static void MapPortfolioEndpoints(this IEndpointRouteBuilder routes)
        {
            var group = routes.MapGroup("/portfolios");

            group.MapPost("/", async (PortfolioDbContext dbContext, PortfolioDto portfolio) =>
            {
                var up = new UserPortfolio();
                dbContext.Portfolios.Add(up);
                await dbContext.SaveChangesAsync();
                return Results.Created($"/portfolios/{up.Id}", portfolio);
            });

            group.MapGet("/{id:long}", async (PortfolioDbContext dbContext, long id) =>
            {
                var portfolio = await dbContext.Portfolios
                    .Include(p => p.Wallets)
                    .Include(p => p.Holdings)
                    .Include("Wallets.Transactions")
                    .FirstOrDefaultAsync(p => p.Id == id);

                return portfolio is not null ? Results.Ok(portfolio) : Results.NotFound();
            });

            group.MapGet("/", async (PortfolioDbContext dbContext) =>
            {
                var portfolios = await dbContext.Portfolios
                    .Include(p => p.Wallets)
                    .Include(p => p.Holdings)
                    .Include("Wallets.Transactions")
                    .ToListAsync();

                return Results.Ok(portfolios);
            });

            group.MapPut("/{id:long}", async (PortfolioDbContext dbContext, long id, UserPortfolio updatedPortfolio) =>
            {
                var portfolio = await dbContext.Portfolios.FindAsync(id);

                if (portfolio is null)
                {
                    return Results.NotFound();
                }

                dbContext.Entry(portfolio).CurrentValues.SetValues(updatedPortfolio);
                await dbContext.SaveChangesAsync();

                return Results.NoContent();
            });

            group.MapDelete("/{id:long}", async (PortfolioDbContext dbContext, long id) =>
            {
                var portfolio = await dbContext.Portfolios.FindAsync(id);

                if (portfolio is null)
                {
                    return Results.NotFound();
                }

                dbContext.Portfolios.Remove(portfolio);
                await dbContext.SaveChangesAsync();

                return Results.NoContent();
            });

            group.MapPost("/{id:long}/calculate-trades", async (PortfolioDbContext dbContext, IPriceHistoryService priceHistoryService, long id) =>
            {
                var portfolio = await dbContext.Portfolios
                    .Include(p => p.Holdings)
                    .Include("Wallets.Transactions")
                    .Include(p => p.FinancialEvents)                    
                    .FirstOrDefaultAsync(p => p.Id == id);

                if (portfolio is null)
                {
                    return Results.NotFound();
                }

                await portfolio.CalculateTradesAsync(priceHistoryService);
                await dbContext.SaveChangesAsync();

                return Results.Ok(PortfolioDto.From(portfolio));
            });
        }
    }
}
using Portfolio.App.DTOs;
using Portfolio.App.Services;

namespace Portfolio.Api.Features
{
    public static class WalletEndpoints
    {
        public static void MapWalletEndpoints(this IEndpointRouteBuilder routes)
        {
            var group = routes.MapGroup("/portfolios/{portfolioId:long}/wallets");

            group.MapGet("/{walletId:long}", async (IWalletService walletService, long portfolioId, long walletId) =>
            {
                var result = await walletService.GetWalletAsync(portfolioId, walletId);
                
                if (result.IsSuccess)
                {
                    return Results.Ok(result.Value);
                }
                return Results.NotFound(result.Error);
            });

            group.MapGet("/", async (IWalletService walletService, long portfolioId) =>
            {
                var result = await walletService.GetWalletsAsync(portfolioId);
                
                if (result.IsSuccess)
                {
                    return Results.Ok(result.Value);
                }
                return Results.NotFound(result.Error);
            });

            group.MapPost("/", async (IWalletService walletService, long portfolioId, WalletDto walletDto) =>
            {
                var result = await walletService.CreateWalletAsync(portfolioId, walletDto);

                if (result.IsSuccess)
                {
                    return Results.Created($"/portfolios/{portfolioId}/wallets/{result.Value}", result.Value);
                }
                return Results.BadRequest(result.Error);
            });

            group.MapDelete("/{walletId:long}", async (IWalletService walletService, long portfolioId, long walletId) =>
            {
                var result = await walletService.DeleteWalletAsync(portfolioId, walletId);

                if (result.IsSuccess)
                {
                    return Results.NoContent();
                }
                return Results.BadRequest(result.Error);
            });
        }


    }
}
using Microsoft.AspNetCore.Mvc;
using Portfolio.Api.Services;
using Portfolio.App;
using Portfolio.App.DTOs;

namespace Portfolio.Api.Features
{
    public static class TransactionEndpoints
    {
        public static void MapTransactionEndpoints(this IEndpointRouteBuilder routes)
        {
            var group = routes.MapGroup("/portfolios/{portfolioId:long}/wallets/{walletId:long}/transactions");

            group.MapPost("/", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, FinancialTransactionDto transactionDto) =>
            {
                var result = await transactionService.AddTransactionAsync(portfolioId, walletId, transactionDto);

                if (result.IsSuccess)
                {
                    return Results.Created($"/portfolios/{portfolioId}/wallets/{walletId}/transactions/{result.Value}", result.Value);
                }
                return Results.BadRequest(result.Error);
            });

            group.MapPut("/{transactionId:long}", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, long transactionId, FinancialTransactionDto transactionDto) =>
            {
                var result = await transactionService.UpdateTransactionAsync(portfolioId, walletId, transactionId, transactionDto);

                if (result.IsSuccess)
                {
                    return Results.NoContent();
                }
                return Results.BadRequest(result.Error);
            });

            group.MapPut("/bulk-edit", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, [FromBody] List<FinancialTransactionDto> transactionsToUpdate) =>
            {
                var result = await transactionService.BulkUpdateTransactionsAsync(portfolioId, walletId, transactionsToUpdate);

                if (result.IsSuccess)
                {
                    return Results.NoContent();
                }
                return Results.BadRequest(result.Error);
            });


            group.MapDelete("/{transactionId:long}", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, long transactionId) =>
            {
                var result = await transactionService.DeleteTransactionAsync(portfolioId, walletId, transactionId);

                if (result.IsSuccess)
                {
                    return Results.NoContent();
                }
                return Results.BadRequest(result.Error);
            });

            group.MapDelete("/bulk-delete", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, [FromBody] long[] transactionIds) =>
            {
                var result = await transactionService.BulkDeleteTransactionsAsync(portfolioId, walletId, transactionIds);

                if (result.IsSuccess)
                {
                    return Results.NoContent();
                }
                return Results.BadRequest(result.Error);
            });


            group.MapGet("/", async (ICryptoTransactionService transactionService, long portfolioId, long walletId) =>
            {
                var result = await transactionService.GetTransactionsAsync(portfolioId, walletId);

                if (result.IsSuccess)
                {
                    return Results.Ok(result.Value);
                }
                return Results.NotFound(result.Error);
            });

            group.MapGet("/{transactionId:long}", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, long transactionId) =>
            {
                var result = await transactionService.GetTransactionAsync(portfolioId, walletId, transactionId);

                if (result.IsSuccess)
                {
                    return Results.Ok(result.Value);
                }
                return Results.NotFound(result.Error);
            });

            group.MapPost("/upload-csv", async (ICryptoTransactionService transactionService, long portfolioId, long walletId, CsvFileImportType csvImportType, IFormFile file) =>
            {
                using (var reader = new StreamReader(file.OpenReadStream()))
                {
                    var result = await transactionService.ImportTransactionsFromCsvAsync(portfolioId, walletId, App.CsvFileImportType.Kraken, reader);
                    if (result.IsSuccess)
                    {
                        return Results.Ok("Transactions imported successfully.");
                    }
                    return Results.BadRequest(result.Error);
                }
            })
#if DEBUG
            .DisableAntiforgery();
#endif
            ;
        }
    }
}
using Portfolio.Infrastructure.Data;

namespace Portfolio.Api;

public static class InitialiserExtensions
{
    public static async Task InitialiseDatabaseAsync(this WebApplication app)
    {
        using var scope = app.Services.CreateScope();

        var initialiser = scope.ServiceProvider.GetRequiredService<PortfolioDbContextInitialiser>();

        await initialiser.InitialiseAsync();

        await initialiser.SeedAsync();
    }
}using Portfolio.Api.Features;
using Portfolio.Api.Services;
using Portfolio.App;
using Portfolio.App.HistoricalPrice;
using Portfolio.App.HistoricalPrice.YahooFinance;
using Portfolio.App.Services;
using Portfolio.Domain.Interfaces;
using Portfolio.Infrastructure;


namespace Portfolio.Api
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddApplicationServices();
            builder.Services.AddInfrastructureServices(builder.Configuration);

            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowSpecificOrigin",
                    builder => builder
                        .WithOrigins("http://localhost:3000") // Replace with your React app's URL
                        .AllowAnyHeader()
                        .AllowAnyMethod()
                        .AllowCredentials()); // Add this if you're using cookies or authentication
            });

            builder.Services.AddScoped<IUser, CurrentUser>();
            builder.Services.AddHttpContextAccessor();

            builder.Services.AddAuthorization();

            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();

            builder.Services.AddScoped<IWalletService, WalletService>();
            builder.Services.AddScoped<ICryptoTransactionService, CryptoTransactionService>();
            builder.Services.AddScoped<IPriceHistoryApi>(p => new PriceHistoryApiWithRetry(new YahooFinancePriceHistoryApi(), 3));
            builder.Services.AddScoped<IPriceHistoryService, PriceHistoryService>();
            builder.Services.AddScoped<IPriceHistoryStorageService, DbContextPriceHistoryStorageService>();


            var app = builder.Build();

            app.UseCors("AllowSpecificOrigin");
            
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.MapWalletEndpoints();
            app.MapPortfolioEndpoints();
            app.MapTransactionEndpoints();


            app.Run();
        }
    }
}
